<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="423" />
    <option name="newTranslationDialogWidth" value="838" />
    <option name="newTranslationDialogX" value="520" />
    <option name="newTranslationDialogY" value="383" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="No metadata is created" />
      <item value="No metadata created" />
      <item value="Integrity Checker is disabled. Fail-fast on corrupted executables will not be performed." />
      <item value="balance" />
      <item value="Mutiny" />
      <item value="routes" />
      <item value="async Certs" />
      <item value="Balance Info" />
      <item value="pool" />
      <item value="Panache Repository Base" />
      <item value="Extended Acquirer Id" />
      <item value="Generalized Acquirer Id" />
      <item value="Обобщённый" />
      <item value="Acquirer Id" />
      <item value="Common Acquirer Id" />
      <item value="покупатель" />
      <item value="Available Programs Response" />
      <item value="exclusive Minimum" />
      <item value="Confirm Auth Request" />
      <item value="Approved Product" />
      <item value="seller" />
      <item value="merchant" />
      <item value="Product Group Limit" />
      <item value="card" />
      <item value="logging" />
      <item value="Validator instances can be pooled and shared by the implementation." />
      <item value="Closes the {@code ValidatorFactory} instance. After the {@code ValidatorFactory} instance is closed, calling the following methods is not allowed: &lt;ul&gt; &lt;li&gt;methods of this {@code ValidatorFactory} instance&lt;li&gt; &lt;li&gt;methods of {@link Validator} instances created by this {@code ValidatorFactory}&lt;li&gt; &lt;ul&gt; @since 1.1" />
      <item value="validation" />
      <item value="Unexpected value" />
      <item value="Utils" />
      <item value="Balance Info Resource" />
      <item value="Balance Resource" />
      <item value="Common error response" />
      <item value="maybe Success" />
      <item value="splits" />
      <item value="smallrye" />
      <item value="rebellion" />
      <item value="mutiny" />
      <item value="finding Card" />
      <item value="not Found Response" />
      <item value="balance Response" />
      <item value="Funds" />
      <item value="Balance Funds Service" />
      <item value="Effectiveness This refers to a design's ability to achieve the desired functionality and behavior using object-oriented design concepts and techniques. Effectiveness = 0.2 Abstraction + 0.2 Encapsulation + 0.2 Composition + 0.2 Inheritance + 0.2 Polymorphism For information on the values used to calculate the above expression, see the comments on the node QMOOD Quality Attributes Set in the metrics tree." />
      <item value="The PF metric represents the actual number of possible different polymorphic situations. A given message sent to class can be bound, statistically or dynamically, to a named method implementation which may have as many shapes as the number of times this same method is overridden (in class descendants). Polymorphism arises from inheritance. Binding (usually at run time) a common message call to one of several classes (in the same hierarchy) is supposed to reduce complexity and to allow refinement of the class hierarchy without side effects. On the other hand, to debug such a hierarchy, by tracing the control flow, this same polymorphism would make the job harder. Therefore, polymorphism ought to be bounded within a certain range." />
      <item value="The Polymorphism Factor is defined as the quotient between the actual number of different possible polymorphic situations, and the maximum number of possible distinct polymorphic situations for given class." />
      <item value="At first sight, we might be tempted to think that inheritance should be used extensively. However, the composition of several inheritance relations builds a directed acyclic graph (inheritance hierarchy tree), whose depth and width make understandability and testability fade away quickly." />
      <item value="The Method Inheritance Factor is defined as a quotient between the sum of inherited methods in all classes of the system under consideration and the total number of available methods (locally defined and include those inherited) for all classes." />
      <item value="The Attribute Inheritance Factor is defined as a quotient between the sum of inherited attributes in all classes of the system under consideration and the total number of available attributes (locally defined plus inherited) for all classes." />
      <item value="Attribute Hiding Factor (AHF) AHF is defined as the ratio of the sum of the invisibilities of all attributes defined in all classes to the total number of attributes defined in the system under consideration. Included in the MOOD set of metrics proposed by Brito e Abreu F. and Carapuça R. see Brito e Abreu F. and Carapuça R. Object-Oriented Software Engineering: Measuring and controlling the development process, 4th Interntional Conference on Software Quality, Mc Lean, VA, USA, 1994 Software quality correlation AHF is a measure of the use of the information hiding concept supported by the encapsulation mechanism. Information hiding allows coping with complexity by turning complex components into black boxes. AHF should be used as much as possible. Ideally all attributes would be hidden, thus being only accessed by the corresponding class methods. Very low values of AHF should trigger the designers’ attention. In general, as AHF increases, the complexity of the program decreases. According to reported studies [1, 2, 3, 4] the minimum and maximum allowed values of this metric are 67.7% and 100.0% respectively. [1]  F. Abreu, M. Goulãoand, R. Esteves, Towardthe Design Quality Evaluation of Object-Oriented Software Systems, Proceedings of the 5th  International Conference on Software Quality,  Austin, Texas, USA, 1995. [2]  F. Abreu and W. Melo, Evaluating the Impact of  Object-Oriented Design on Software Quality,  Proceeding of the 3rd International Software Metrics Symposium (METRICS’96), IEEE, Berlin, Germany, pp. 90-99, 1996. [3]  F. Abreu, S. Estevesand M. Goulao, TheDesign of Eiffel Programs: Quantitative Evaluation Using the MOOD Metrics, Proceedings of TOOLS'96, Santa Barbara, CA, USA, 1996. [4]  R. Harrison, S. Counsell and R. Nithi, An evaluation of the MOOD set of object-oriented software metrics, IEEE Transaction on Software Engineering, 24(6), 1998, pp. 491-496." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="581" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="581" />
        <entry key="FRENCH" value="3" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="5" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1659720855775" />
  </component>
  <component name="Settings">
    <option name="phoneticFontFamily" value="Hack Nerd Font Mono" />
    <option name="primaryFontFamily" value="JetBrains Mono" />
  </component>
</application>